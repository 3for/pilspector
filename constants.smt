; Powers of 256 function
(declare-fun p256 (Int) Int)
(assert (= 1 (p256 0)))
(assert (= 256 (p256 1)))
(assert (= 65536 (p256 2)))
(assert (= 16777216 (p256 3)))

(define-fun p256_mod4 ((v Int)) Int (p256 (mod v 4)))

(define-fun Arith_BYTE2_BIT19_0 ((r Int) (v Int)) Bool (and (= r v) (>= v 0) (<= v 589823)))
(define-fun Arith_CLK_n ((n Int) (r Int) (v Int)) Bool (= v (ite (= (mod r 32) n) 1 0)))
(define-fun Arith_CLK_0 ((r Int) (v Int)) Bool (Arith_CLK_n 0 r v))
(define-fun Arith_CLK_1 ((r Int) (v Int)) Bool (Arith_CLK_n 1 r v))
(define-fun Arith_CLK_2 ((r Int) (v Int)) Bool (Arith_CLK_n 2 r v))
(define-fun Arith_CLK_3 ((r Int) (v Int)) Bool (Arith_CLK_n 3 r v))
(define-fun Arith_CLK_4 ((r Int) (v Int)) Bool (Arith_CLK_n 4 r v))
(define-fun Arith_CLK_5 ((r Int) (v Int)) Bool (Arith_CLK_n 5 r v))
(define-fun Arith_CLK_6 ((r Int) (v Int)) Bool (Arith_CLK_n 6 r v))
(define-fun Arith_CLK_7 ((r Int) (v Int)) Bool (Arith_CLK_n 7 r v))
(define-fun Arith_CLK_8 ((r Int) (v Int)) Bool (Arith_CLK_n 8 r v))
(define-fun Arith_CLK_9 ((r Int) (v Int)) Bool (Arith_CLK_n 9 r v))
(define-fun Arith_CLK_10 ((r Int) (v Int)) Bool (Arith_CLK_n 10 r v))
(define-fun Arith_CLK_11 ((r Int) (v Int)) Bool (Arith_CLK_n 11 r v))
(define-fun Arith_CLK_12 ((r Int) (v Int)) Bool (Arith_CLK_n 12 r v))
(define-fun Arith_CLK_13 ((r Int) (v Int)) Bool (Arith_CLK_n 13 r v))
(define-fun Arith_CLK_14 ((r Int) (v Int)) Bool (Arith_CLK_n 14 r v))
(define-fun Arith_CLK_15 ((r Int) (v Int)) Bool (Arith_CLK_n 15 r v))
(define-fun Arith_CLK_16 ((r Int) (v Int)) Bool (Arith_CLK_n 16 r v))
(define-fun Arith_CLK_17 ((r Int) (v Int)) Bool (Arith_CLK_n 17 r v))
(define-fun Arith_CLK_18 ((r Int) (v Int)) Bool (Arith_CLK_n 18 r v))
(define-fun Arith_CLK_19 ((r Int) (v Int)) Bool (Arith_CLK_n 19 r v))
(define-fun Arith_CLK_20 ((r Int) (v Int)) Bool (Arith_CLK_n 20 r v))
(define-fun Arith_CLK_21 ((r Int) (v Int)) Bool (Arith_CLK_n 21 r v))
(define-fun Arith_CLK_22 ((r Int) (v Int)) Bool (Arith_CLK_n 22 r v))
(define-fun Arith_CLK_23 ((r Int) (v Int)) Bool (Arith_CLK_n 23 r v))
(define-fun Arith_CLK_24 ((r Int) (v Int)) Bool (Arith_CLK_n 24 r v))
(define-fun Arith_CLK_25 ((r Int) (v Int)) Bool (Arith_CLK_n 25 r v))
(define-fun Arith_CLK_26 ((r Int) (v Int)) Bool (Arith_CLK_n 26 r v))
(define-fun Arith_CLK_27 ((r Int) (v Int)) Bool (Arith_CLK_n 27 r v))
(define-fun Arith_CLK_28 ((r Int) (v Int)) Bool (Arith_CLK_n 28 r v))
(define-fun Arith_CLK_29 ((r Int) (v Int)) Bool (Arith_CLK_n 29 r v))
(define-fun Arith_CLK_30 ((r Int) (v Int)) Bool (Arith_CLK_n 30 r v))
(define-fun Arith_CLK_31 ((r Int) (v Int)) Bool (Arith_CLK_n 31 r v))
(define-fun Arith_GL_SIGNED_18BITS_0 ((r Int) (v Int)) Bool (and (>= v -262144) (<= v 262144) (exists ((k Int)) (= v (+ -262144 (+ r (* k 524289)))))))
(define-fun Arith_GL_SIGNED_4BITS_C0_0 ((r Int) (v Int)) Bool (and (>= v -16) (<= v 16) (exists ((k Int)) (= v (+ -16 (+ r (* k 33)))))))
(define-fun Arith_GL_SIGNED_4BITS_C1_0 ((r Int) (v Int)) Bool (and (>= v -16) (<= v 16) (exists ((k Int)) (= v (+ -16 (+ r (* k 33)))))))
(define-fun Arith_GL_SIGNED_4BITS_C2_0 ((r Int) (v Int)) Bool (and (>= v -16) (<= v 16) (exists ((k Int)) (= v (+ -16 (+ r (* k 33)))))))
(define-fun Arith_SEL_BYTE2_BIT19_0 ((r Int) (v Int)) Bool (ite (<= r 65535) (= v 0) (= v 1)))
(define-fun Binary_FACTOR_n ((n Int) (r Int) (v Int)) Bool (= v (ite (< (mod (- r (* n 4)) 32) 4) (p256_mod4 r) 0)))
(define-fun Binary_FACTOR_0 ((r Int) (v Int)) Bool (Binary_FACTOR_n 0 r v))
(define-fun Binary_FACTOR_1 ((r Int) (v Int)) Bool (Binary_FACTOR_n 1 r v))
(define-fun Binary_FACTOR_2 ((r Int) (v Int)) Bool (Binary_FACTOR_n 2 r v))
(define-fun Binary_FACTOR_3 ((r Int) (v Int)) Bool (Binary_FACTOR_n 3 r v))
(define-fun Binary_FACTOR_4 ((r Int) (v Int)) Bool (Binary_FACTOR_n 4 r v))
(define-fun Binary_FACTOR_5 ((r Int) (v Int)) Bool (Binary_FACTOR_n 5 r v))
(define-fun Binary_FACTOR_6 ((r Int) (v Int)) Bool (Binary_FACTOR_n 6 r v))
(define-fun Binary_FACTOR_7 ((r Int) (v Int)) Bool (Binary_FACTOR_n 7 r v))
(define-fun Binary_P_A_0 ((r Int) (v Int)) Bool (= v (mod (div r 256) 256)))
(define-fun Binary_P_B_0 ((r Int) (v Int)) Bool (= v (mod r 256)))
; Binary constants are too hard. Since it is out of scope, I'll skip the rest for now.
(define-fun Byte4_SET_0 ((r Int) (v Int)) Bool (= v (mod (+ r 1) 2)))
(define-fun Global_BYTE_0 ((r Int) (v Int)) Bool (and (= r v) (>= v 0) (<= v 255)))
(define-fun Global_BYTE2_0 ((r Int) (v Int)) Bool (and (= r v) (>= v 0) (<= v 65535)))
(define-fun Global_L1_0 ((r Int) (v Int)) Bool (= v (ite (= r 0) 1 0)))
; Keccak is too hard, skipping.
(define-fun Main_STEP_0 ((r Int) (v Int)) Bool (= r v))
(define-fun Mem_INCS_0 ((r Int) (v Int)) Bool (= (+ r 1) v ))
(define-fun Mem_ISNOTLAST_0 ((r Int) (v Int)) Bool (= v (ite (= r 2097151) 0 1)))
(define-fun MemAlign_BYTE_C3072_0 ((r Int) (v Int)) Bool (= v (div r 3072)))
(define-fun MemAlign_BYTE2A_0 ((r Int) (v Int)) Bool (Binary_P_A_0 r v))
(define-fun MemAlign_BYTE2B_0 ((r Int) (v Int)) Bool (Binary_P_B_0 r v))
; MemAlign_FACTOR_0 is quite different from FACTOR_1 to FACTOR_7, so it is defined separatelly
(define-fun MemAlign_FACTOR_0 ((r Int) (v Int)) Bool (= v (ite (= (mod (div r 4) 8) 7) (p256_mod4 (- 3 r)) 0)))
(define-fun MemAlign_FACTOR_n ((n Int) (r Int) (v Int)) Bool (= v (ite (= (mod (div r 4) 8) n) (p256_mod4 r) 0)))
(define-fun MemAlign_FACTOR_1 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 1 r v))
(define-fun MemAlign_FACTOR_2 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 2 r v))
(define-fun MemAlign_FACTOR_3 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 3 r v))
(define-fun MemAlign_FACTOR_4 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 4 r v))
(define-fun MemAlign_FACTOR_5 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 5 r v))
(define-fun MemAlign_FACTOR_6 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 6 r v))
(define-fun MemAlign_FACTOR_7 ((r Int) (v Int)) Bool (MemAlign_FACTOR_n 7 r v))
(define-fun MemAlign_OFFSET_0_func ((r Int)) Int (mod (div r 32) 32))
(define-fun MemAlign_WR8_0_func ((r Int)) Int (ite (< (mod r 3072) 2048) 0 1))
(define-fun MemAlign_STEP_0_func ((r Int)) Int (mod r 32))
(define-fun MemAlign_V_BYTE_func ((r Int)) Int (let (
    (wr8 (MemAlign_WR8_0_func r))
    (step (MemAlign_STEP_0_func r))
    (offset (MemAlign_OFFSET_0_func r))
) (mod (- (+ 31 offset wr8) step) 32)))
(define-fun MemAlign_FACTORV_n ((n Int) (r Int) (v Int)) Bool (let (
    (v_byte (MemAlign_V_BYTE_func r))
) (= (ite (= n (div v_byte 4)) (p256_mod4 v_byte ) 0) v)))
(define-fun MemAlign_FACTORV_0 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 0 r v))
(define-fun MemAlign_FACTORV_1 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 1 r v))
(define-fun MemAlign_FACTORV_2 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 2 r v))
(define-fun MemAlign_FACTORV_3 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 3 r v))
(define-fun MemAlign_FACTORV_4 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 4 r v))
(define-fun MemAlign_FACTORV_5 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 5 r v))
(define-fun MemAlign_FACTORV_6 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 6 r v))
(define-fun MemAlign_FACTORV_7 ((r Int) (v Int)) Bool (MemAlign_FACTORV_n 7 r v))
(define-fun MemAlign_OFFSET_0 ((r Int) (v Int)) Bool (= v (MemAlign_OFFSET_0_func r)))
(define-fun MemAlign_RESET_0 ((r Int) (v Int)) Bool (= v (ite (= 0 (mod r 32)) 1 0)))
(define-fun MemAlign_SELM1_0 ((r Int) (v Int)) Bool (let (
    (wr8 (MemAlign_WR8_0_func r))
    (step (MemAlign_STEP_0_func r))
    (offset (MemAlign_OFFSET_0_func r))
) (= v (ite (ite (= 1 wr8) (= step offset) (> offset step)) 1 0))
))
(define-fun MemAlign_STEP_0 ((r Int) (v Int)) Bool (= v (MemAlign_STEP_0_func r)))
(define-fun MemAlign_WR8_0 ((r Int) (v Int)) Bool (= v (MemAlign_WR8_0_func r)))
(define-fun MemAlign_WR256_0 ((r Int) (v Int)) Bool (MemAlign_WR8_0 (+ r 1024) v))